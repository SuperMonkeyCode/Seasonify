// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rendering should match, with a tvshowName 1`] = `
<Styled(ListItem)
  avatar={true}
  onPress={[Function]}
>
  <Styled(Left)>
    <Styled(Thumbnail)
      source={
        Object {
          "uri": "http://poster.png",
        }
      }
      square={true}
      style={Object {}}
    />
  </Styled(Left)>
  <Styled(Body)
    style={
      Object {
        "alignItems": "stretch",
        "flexDirection": "row",
        "flexWrap": "wrap",
        "justifyContent": "space-between",
      }
    }
  >
    <Styled(Text)
      style={
        Object {
          "flexGrow": 1,
        }
      }
    >
      Deadwood
    </Styled(Text)>
    <Styled(Text)
      style={Object {}}
    >
      / 
      5
    </Styled(Text)>
    <Styled(ViewNB)
      style={
        Object {
          "flexBasis": "100%",
          "flexDirection": "row",
          "flexWrap": "wrap",
        }
      }
    >
      <Styled(Text)
        note={true}
        numberOfLines={1}
        style={Object {}}
      >
        Friend 1
        :
        4
         
      </Styled(Text)>
      <Styled(Text)
        note={true}
        numberOfLines={1}
        style={Object {}}
      >
        Friend 2
        :
        5
         
      </Styled(Text)>
    </Styled(ViewNB)>
  </Styled(Body)>
</Styled(ListItem)>
`;

exports[`Rendering should match, with empty values 1`] = `
<Styled(ListItem)
  avatar={true}
  onPress={[Function]}
>
  <Styled(Left)>
    <Styled(Button)
      style={
        Object {
          "width": 57,
        }
      }
      transparent={true}
    />
  </Styled(Left)>
  <Styled(Body)
    style={
      Object {
        "alignItems": "stretch",
        "flexDirection": "row",
        "flexWrap": "wrap",
        "justifyContent": "space-between",
      }
    }
  >
    <Styled(Text)
      style={
        Object {
          "flexGrow": 1,
        }
      }
    />
    <Styled(Text)
      style={Object {}}
    >
      / 
      5
    </Styled(Text)>
    <Styled(ViewNB)
      style={
        Object {
          "flexBasis": "100%",
          "flexDirection": "row",
          "flexWrap": "wrap",
        }
      }
    >
      <Styled(Text)>
         
      </Styled(Text)>
    </Styled(ViewNB)>
  </Styled(Body)>
</Styled(ListItem)>
`;
